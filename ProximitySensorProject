//I2C LCD
//DVD
#include <xc.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include  "i2c.h"
#include  "i2c_LCD.h"

// PIC16F1829 Configuration Bit Settings
// 'C' source line config statements

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

// CONFIG1
#pragma config FOSC = INTOSC    // Oscillator Selection (INTOSC oscillator: I/O function on CLKIN pin)
#pragma config WDTE = OFF       // Watchdog Timer Enable (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable (PWRT disabled)
#pragma config MCLRE = ON       // MCLR Pin Function Select (MCLR/VPP pin function is MCLR)
#pragma config CP = OFF         // Flash Program Memory Code Protection (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Memory Code Protection (Data memory code protection is disabled)
#pragma config BOREN = ON       // Brown-out Reset Enable (Brown-out Reset enabled)
#pragma config CLKOUTEN = OFF   // Clock Out Enable (CLKOUT function is disabled. I/O or oscillator function on the CLKOUT pin)
#pragma config IESO = OFF       // Internal/External Switchover (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enable (Fail-Safe Clock Monitor is disabled)

// CONFIG2
#pragma config WRT = OFF        // Flash Memory Self-Write Protection (Write protection off)
#pragma config PLLEN = OFF      // PLL Enable (4x PLL disabled)
#pragma config STVREN = ON      // Stack Overflow/Underflow Reset Enable (Stack Overflow or Underflow will cause a Reset)
#pragma config BORV = LO        // Brown-out Reset Voltage Selection (Brown-out Reset Voltage (Vbor), low trip point selected.)
#pragma config LVP = OFF        // Low-Voltage Programming Enable (High-voltage on MCLR/VPP must be used for programming)

//LCD #define
#define I2C_SLAVE 0x27	/* was 1E Channel of i2c slave depends on soldering on back of board*/
#define _XTAL_FREQ 4000000.0    /*for 4mhz*/


//Prototypes
void I2C_LCD_Command(unsigned char,unsigned char);
void I2C_LCD_SWrite(unsigned char,unsigned char *, char);
void I2C_LCD_Init(unsigned char);
void I2C_LCD_Pos(unsigned char,unsigned char);
unsigned char I2C_LCD_Busy(unsigned char);

// Function Protoypes
int ping_sensor();
  
void main(void) {
    
    //Variables
	unsigned char  Sout[16];
	unsigned char * Sptr;
    int z;
	Sptr = Sout;

    //Clock and Pin Configs
	OSCCON  = 0x68; /* b6..4 = 1101 = 4MHz */

	/*  ********************************I2C**************************** */
	/*  Note the I2C write to LCD uses the 8 bits of the PCF8574 chip to control the LCD  */
	/*  Connected High 4 bits are High 4 data for LCD (use in 4 bit mode)  the other 4 are     */
	/*  bit3=turn on /off bk light  bit 2= E line writes on Hi 2 Lo transition, reads Lo to Hi */
	/*  bit 2=Read write set  to 0 for write   bit 0=RS  command=0 Data=1      */
	/*  ********************************I2C**************************** */
    
	i2c_Init();				// Start I2C as Master 100KH
	I2C_LCD_Init(I2C_SLAVE); //pass I2C_SLAVE to the init function to create an instance
	
	//First Words: Let's say Hello
    I2C_LCD_Command(I2C_SLAVE, 0x01); //Clear Display
    I2C_LCD_Pos(I2C_SLAVE, 0x40); //Set Position to start bottom line
    sprintf(Sout, "Distance = %d", ping_sensor());
    I2C_LCD_SWrite(I2C_SLAVE, Sout, 13);
    __delay_ms(1000.0);  
    
    //LED CODE
    TRISA = 0x00;
    PORTA = 0x00;
    if(ping_sensor() <= 5){
    RA4 = 1; //RED LED (STOP)
    }
    else if(ping_sensor() > 5 & ping_sensor() < 10){
    RA5 = 1; //HELLO WORLD/YELLOW LED (CAREFULL)
    }
    else if(ping_sensor() >= 10){
    RA1 = 1; //GREEN/ORANGE LED (GO)    
    }
    }	

  int ping_sensor(){
  
    int a;
    
    TRISC = 0b00010000;         //RC4 as Input PIN (ECHO)
    ANSELC = 0x0;

    T1CON = 0x10;               //Initialize Timer Module
  
    TMR1H = 0;                //Sets the Initial Value of Timer
    TMR1L = 0;                //Sets the Initial Value of Timer

    RC5 = 1;                  //TRIGGER HIGH
    __delay_us(10);           //10uS Delay 
    RC5 = 0;                   //TRIGGER LOW

    while(!RC4);              //Waiting for Echo
    TMR1ON = 1;               //Timer Starts
    while(RC4);               //Waiting for Echo goes LOW
    TMR1ON = 0;               //Timer Stops

    a = (TMR1L | (TMR1H<<8)); //Reads Timer Value
    a = a/58.82;              //Converts Time to Distance
    a = a + 1;                //Distance Calibration

    return a;
  }
